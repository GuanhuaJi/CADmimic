You are writing CADQuery code (Python 3).
Use only the APIs listed below, do not use complex CADQuery APIs as they will cause bugs
## Task (video → CADQuery object)
You are given 1 reference video of an object. Using that video only as a visual guide (do NOT load or process the image in code), generate CADQuery code that models the object as closely as reasonably possible while using only the allowed APIs.
NOTE: make sure the color matches as well!

Common CadQuery API for 2D Sketching and 3D Modeling
Below is a list of common CadQuery APIs for creating 2D sketches and generating 3D features (extrusions and revolutions). For each API, we describe how to use it, its arguments, return values, and provide a usage example. Only use these APIs when generating code (do not invent new ones). This will help ensure the generated code is valid and runs without errors.
Workplane (Starting a Sketch Plane)

Usage: cq.Workplane(plane="XY", origin=(0,0,0), obj=None)
Description: Creates a new 2D workplane (coordinate system) on the specified plane. This defines the context in which you sketch 2D geometry[1][2]. By default, plane="XY" places the workplane in the XY plane (flat horizontal plane) with the origin at (0,0,0). After creation, the workplane’s stack contains a single point at the origin of that plane[3].
Arguments:
- plane (Plane object or str) – The base plane for the workplane (e.g. "XY", "YZ", "XZ", or named planes like "front", "top")[4]. Default is "XY".
- origin (3-tuple, optional) – Origin coordinates for the new workplane in global coordinates. Defaults to (0,0,0)[5].
- obj (optional) – An initial object (e.g. a face or solid) to put on the stack. If None, the stack starts with the workplane’s origin point[6].
Returns: A Workplane object with the specified coordinate system[7][3]. This object is the entry point for 2D sketch operations (like drawing lines or circles).
Example:

import cadquery as cq
wp = cq.Workplane("XY")  # Start a workplane on the XY plane at (0,0,0)
workplane() Method (Creating a New Plane on a Face)
Usage: workplane(offset=0.0, invert=False) (called on an existing Workplane)
Description: Creates a new 2D workplane on the current selected face or plane, optionally offset by a given distance. This is typically used after selecting a face to draw on it or above/below it[8]. If a face is on the stack, the new workplane will be oriented parallel to that face. The offset moves the plane along the face’s normal direction (positive is outward)[9]. By default, the new workplane’s origin lies at the center of the face and its Z-axis is normal to the face[10].
Arguments:
- offset (float, default 0.0) – Distance to offset the new workplane from the face along the face’s normal[9]. For example, workplane(offset=2.0) will create the plane 2 units away from the face.
- invert (bool, default False) – If True, flip/invert the direction of the workplane’s Z-axis (normal) relative to the face[9]. Use this if you need the workplane oriented in the opposite direction.
Returns: A new Workplane object on the specified face/offset[9]. The original workplane is kept as the parent in the chain.
Example:

result = part.faces(">Z").workplane(offset=5.0)  # On top face, 5 units above it
(In this example, part is an existing Workplane or CQ object with a solid. We select its top face (">Z") and create a new workplane 5 units above that face.)
line (Relative Line in Sketch)
Usage: .line(dx, dy)
Description: Draws a straight line from the current point in the workplane by the given relative offsets[11]. After drawing, the end of the line becomes the new current point. Use this for incremental sketching where you specify how far to go in X and Y from the last point.
Arguments:
- dx (float) – Distance to move in the workplane’s X direction from the current point[12].
- dy (float) – Distance to move in the workplane’s Y direction from the current point[12].
- (forConstruction is an optional argument in CadQuery’s API, default False, which we can ignore for basic usage.)
Returns: The Workplane object, now with the line segment added and current point at the new end of the line[13]. (Internally, the line is stored as an Edge until the sketch is closed.)
Example:

result = cq.Workplane("XY").line(10, 0)  # from (0,0) to (10,0) in the workplane
lineTo (Absolute Line in Sketch)
Usage: .lineTo(x, y)
Description: Draws a straight line from the current point to an absolute point (x, y) in the workplane’s coordinates[14]. The coordinates are relative to the workplane origin (0,0). After the call, the current point becomes (x, y). Use this when you know the target coordinates for the end of the line.
Arguments:
- x (float) – X coordinate of the end point in the workplane’s plane[15].
- y (float) – Y coordinate of the end point in the workplane’s plane[15].
- (Optional forConstruction argument default False, similar to line.)
Returns: The Workplane object with the new line added, current point moved to (x, y)[15].
Example:

result = cq.Workplane("XY").lineTo(5, 5)  # draw line from current point to (5,5)
polyline (Series of Connected Lines)
Usage: .polyline([(x1, y1), (x2, y2), ...])
Description: Draws a sequence of straight line segments through the list of points given. It connects the current point to the first point, then each subsequent point in order[16][17]. This is a convenient way to draw a polyline shape without calling multiple lineTo methods. (After using polyline, you often call .close() if you want to close the loop.)
Arguments:
- listOfXYTuple (list of tuples) – A list of points [(x1,y1), (x2,y2), ...] in workplane coordinates through which the polyline will pass[18]. The first segment goes from the current point to the first tuple.
- forConstruction (bool, default False) – If True, creates construction (reference) lines that won’t form part of a solid; if False, creates real geometry edges[18]. (For basic solid sketches, use the default False.)
Returns: The Workplane object with the edges of the polyline added to the stack[17]. All the new line segments are added as one continuous wire (if possible).
Example:

# Starting from (0,0) by default:
result = cq.Workplane("XY").polyline([(0, 5), (5, 5), (5, 0)])  
# This draws lines from (0,0)->(0,5)->(5,5)->(5,0), leaving current point at (5,0).
rect (Rectangle Sketch)
Usage: .rect(width, height, centered=True)
Description: Creates a rectangle on the workplane for each selected point on the stack (or at the workplane origin if none were selected). It actually draws a closed rectangular wire of the given width and height[19][20]. Typically you call this on a fresh workplane (with the origin point) to get a rectangle centered on the origin. You can also use centered=False to specify a corner at the reference point.
Arguments:
- width (float > 0) – The length of the rectangle in the workplane’s X direction[21].
- height (float > 0) – The length of the rectangle in the workplane’s Y direction[21].
- centered (bool, default True) – If True, the rectangle is centered on the reference point; if False, the reference point will be the lower-left corner of the rectangle[22].
- forConstruction (bool, default False) – If True, creates the rectangle as construction geometry (not used to make a solid)[23]. Usually False for solid modeling.
Returns: A Workplane object with the rectangular wire placed on the stack[24]. You can directly extrude this rectangle to get a box, or use it as a sketch profile.
Example:

result = cq.Workplane("XY").rect(2.0, 4.0)  # 2x4 rectangle centered at (0,0)
circle (Circle Sketch)
Usage: .circle(radius)
Description: Draws a circle of the given radius on the workplane. The circle is drawn around the current point(s) on the stack (for a fresh workplane, that is the origin)[25]. If multiple points are on the stack (e.g., after using .pushPoints or a construction array of points), it will draw one circle at each point. This is useful for making multiple holes or posts in one operation.
Arguments:
- radius (float > 0) – Radius of the circle to draw[25].
- forConstruction (bool, default False) – If True, the circle is just a reference (construction) wire; if False, it is real geometry to be used in a solid[26].
Returns: A Workplane object with the new circle wire(s) added to the stack[27]. (Each circle is represented as a closed wire.)
Example:

result = cq.Workplane("XY").circle(1.5)  # circle of radius 1.5 around the workplane origin
(If this is the first sketch element, the circle’s center will be at (0,0) of the workplane.)
close (Close a Sketch Loop)
Usage: .close()
Description: Closes the current sequence of sketch segments into a loop (wire). This will connect the current point back to the starting point of the sequence, forming a closed shape[28]. Use .close() after drawing with line, lineTo, polyline, etc., when you want to create a closed profile that can be extruded or revolved. Calling close() also ends the 2D construction mode and combines the drawn edges into a wire[29].
Arguments: None.
Returns: A Workplane object where the pending edges have been converted into a closed wire on the stack (if the geometry was indeed closable)[28]. If the edges do not form a closed loop, CadQuery will attempt to close the last point to the first automatically[30][31]. After closing, you can proceed to 3D operations like extrude.
Example:

result = cq.Workplane("XY").lineTo(2, 0).lineTo(2, 2).lineTo(0, 2).close()
# Draws a square from (0,0) to (2,0)->(2,2)->(0,2) and closes back to (0,0).
(Now result has a closed square wire on the stack, which can be extruded.)
extrude (Extrude 2D Sketch into 3D)
Usage: .extrude(distance, combine=True, clean=True, both=False)
Description: Extrudes a closed 2D sketch profile (wire) perpendicular to the workplane to create a 3D solid[32]. In other words, it takes the 2D shape and pushes it along the workplane’s normal by the given distance, forming a prism or cylindrical solid. Important: The profile must be a closed wire (e.g., a closed loop of lines, a circle, or a rectangle) for a solid to be created. Extruding always adds material (it will fuse with existing solid if combine=True)[33].
Arguments:
- distance (float) – The length to extrude. This is measured along the workplane’s normal. A positive value extrudes in the normal direction; a negative value extrudes in the opposite direction[34]. (If both=True, it extrudes half in each direction.)
- combine (bool, default True) – If True, the new solid is fused/combined with the existing solid in the workplane’s chain (if there is one). If False, the extruded solid remains separate on the stack[35][36]. (Typically True when building one part.)
- clean (bool, default True) – If True, perform a cleanup operation after extruding to remove redundant edges and faces[35]. This is usually left True to ensure a tidy solid.
- both (bool, default False) – If True, extrude symmetrically in both directions (half the distance in each direction)[34]. Use this if you want to extrude equally above and below the sketch plane.
Returns: A Workplane object with the resulting solid selected on the stack[37]. The return is always a Workplane (CadQuery CQ) object; if combine=True and there was an existing solid, the result is that combined solid[38]. If combine=False, the new solid is just added to the stack.
Example:

result = cq.Workplane("XY").circle(1.0).extrude(5.0)
This draws a circle of radius 1.0 on the XY plane and extrudes it by 5.0 units to create a cylinder[39]. (Since this is the first solid, combine doesn’t matter in this case.)
revolve (Revolve Sketch into 3D)
Usage: .revolve(angleDegrees=360.0, axisStart=None, axisEnd=None, combine=True, clean=True)
Description: Revolves a 2D wire (profile) around an axis to create a solid of revolution[40]. It’s like spinning the sketch around a line (axis) to sweep out a 3D shape – for example, revolving a profile of a cup to get a full cup solid. By default, if no axis is specified, the axis of rotation is a line through the workplane origin, parallel to the workplane’s Y-axis[41][42]. (In the XY workplane, that means a vertical line at X=0 in the sketch, i.e., the Y-axis in that plane.) Ensure your profile is oriented correctly relative to the axis so that it forms a closed area when revolved (commonly one edge of the profile lies along the would-be axis).
Arguments:
- angleDegrees (float, default 360.0) – The angle to revolve through, in degrees[43]. Use 360 for a full revolution (solid closed shape). You can use an angle < 360 to create an open or partial revolve (e.g., 180 for a half-revolved shape).
- axisStart (tuple, default None) – The start point of the rotation axis line, given in workplane coordinates (if not None). If axisStart and axisEnd are None, the axis defaults to the workplane origin[41].
- axisEnd (tuple, default None) – The end point of the rotation axis line. If not provided, it defaults to a point one unit along the workplane’s Y direction from axisStart[42]. (In default case, this means the axis is along the workplane’s Y-axis through the origin.)
- combine (bool, default True) – If True, fuses the revolved solid with any existing solid on the stack (like adding it to the part)[44]. If False, the new solid is separate on the stack.
- clean (bool, default True) – If True, cleans up the solid after revolving (removing unnecessary edges)[45]. Usually left True.
Returns: A Workplane object with the new revolved solid selected on the stack[46]. The behavior of combine is similar to extrude: if combining, you get one fused solid; otherwise, multiple solids might be on the stack.
Example:

# Profile: a rectangle 2 units wide (x) and 5 units high (y), with one edge on the Y-axis
result = cq.Workplane("XY").polyline([(0,0), (0,5), (2,5), (2,0)]).close().revolve(angleDegrees=360)
In this example, we drew a rectangular profile where the left edge lies along the workplane’s Y-axis (x=0). Revolving it 360° around that Y-axis produces a cylindrical shape (a solid tube of height 5 and diameter 2).
Code Generation Template
When generating CadQuery code from an image, follow a structured approach. Below are templates for typical use-cases: an extrusion workflow and a revolution workflow. Always start by creating a workplane, then sketch the 2D profile, close it if needed, and finally apply the 3D operation.
•	Extrusion Example Template: Use this for prismatic shapes that are made by extruding a flat profile.

 	import cadquery as cq

result = cq.Workplane("XY") \
    .<sketch operations to create a closed 2D profile> \
    .close() \
    .extrude(<extrude_height>)
 	Fill in the sketch operations (lines, circles, etc.) needed to match the image. Ensure the profile is closed (use .close() if you drew open edges). Then extrude by the given height.
•	Revolve Example Template: Use this for radially symmetric shapes (lathed shapes) created by revolving a profile around an axis.

 	import cadquery as cq

result = cq.Workplane("XY") \
    .<sketch operations to create a revolve profile> \
    .close() \
    .revolve(angleDegrees=360)
 	Here, sketch a 2D profile of the object’s cross-section. Typically one edge of the profile should lie along the intended axis of revolution (e.g., on the Y-axis if using the default axis). Close the profile and revolve it 360 degrees to form the solid.




## Allowed imports

```python
import cadquery as cq
```

---

## Core modeling objects

### `cq.Workplane(inPlane="XY", origin=(0,0,0), obj=None)`

* **Purpose**: Create a modeling plane and stack.
* **Returns**: `cq.Workplane`.
* **Notes**: `inPlane` may be `"XY"`, `"YZ"`, `"XZ"`, `"front"`, `"back"`, `"top"`, `"bottom"`, `"left"`, `"right"`. You’ll usually start with `cq.Workplane("XY")`. ([CadQuery][1])

---

## 2D sketch primitives (on Workplane)

> Use these to draw profiles; then make 3D with `extrude` or `revolve`.

### `rect(xLen, yLen, centered=True| (bool,bool), forConstruction=False)`

* **Purpose**: Add a rectangular wire.
* **Returns**: `cq.Workplane` with the wire(s) on the stack.
* **Example**:

  ```python
  wp = cq.Workplane("XY").rect(40, 20)
  ```

### `circle(radius, forConstruction=False)`

* **Purpose**: Add a circular wire.
* **Returns**: `cq.Workplane`.
* **Example**:

  ```python
  wp = cq.Workplane("XY").circle(10)
  ```

### `ellipse(x_radius, y_radius, rotation_angle=0.0, forConstruction=False)`

* **Purpose**: Add an elliptical wire.
* **Returns**: `cq.Workplane`.
* **Example**:

  ```python
  wp = cq.Workplane("XY").ellipse(20, 10)
  ```

### `polygon(nSides, diameter, forConstruction=False, circumscribed=False)`

* **Purpose**: Add a regular polygon wire (inscribed by default).
* **Returns**: `cq.Workplane`.
* **Example**:

  ```python
  wp = cq.Workplane("XY").polygon(6, 30)
  ```

> Helpful 2D positioning helpers you may use:
> `center(x,y)`, `moveTo(x,y)`, `move(xDist,yDist)`, `lineTo(x,y)`, `hLine(...)`, `vLine(...)` etc., all on `Workplane`. Keep usage simple and exact. ([CadQuery][1])

---

## 3D features from sketches (on Workplane)

### `extrude(until, combine=True|"cut"|"a"|"s"|False, clean=True, both=False, taper=None)`

* **Purpose**: Turn pending wires into a prismatic solid.
* **`until`**: `float` distance, `"next"`, `"last"`, or a `Face`.
* **Returns**: `cq.Workplane` selecting the resulting solid.
* **Example**:

  ```python
  result = (cq.Workplane("XY").rect(40, 20).extrude(10))
  ```

### `revolve(angleDegrees=360.0, axisStart=None, axisEnd=None, combine=True|"cut"|"a"|"s"|False, clean=True)`

* **Purpose**: Revolve pending wires around an axis.
* **Returns**: `cq.Workplane`.
* **Example** (revolve a circle into a “ball cap”):

  ```python
  result = (cq.Workplane("XY")
            .center(0, 0).circle(10)
            .revolve(360, axisStart=(0,0,0), axisEnd=(0,1,0)))
  ```


---

## 3D primitive solids (on Workplane)

> These place solids at each point on the workplane stack (or the workplane center if none). All support `centered=True | (bx,by,bz)`, `combine`, `clean`.

### `box(length, width, height, centered=True|(bool,bool,bool), combine=True, clean=True)`

* **Returns**: `cq.Workplane`.
* **Example**:

  ```python
  result = cq.Workplane("XY").box(40, 20, 10)
  ```


### `cylinder(height, radius, direct=(0,0,1), angle=360, centered=True|(… ), combine=True, clean=True)`

* **Returns**: `cq.Workplane`.
* **Example**:

  ```python
  result = cq.Workplane("XY").cylinder(20, 8)
  ```


### `sphere(radius, direct=(0,0,1), angle1=-90, angle2=90, angle3=360, centered=True|(… ), combine=True, clean=True)`

* **Returns**: `cq.Workplane`.
* **Example**:

  ```python
  result = cq.Workplane("XY").sphere(12)
  ```


### `wedge(dx, dy, dz, xmin, zmin, xmax, zmax, pnt=(0,0,0), dir=(0,0,1), centered=True|(… ), combine=True, clean=True)`

* **Returns**: `cq.Workplane`.
* **Example**:

  ```python
  result = cq.Workplane("XY").wedge(40, 20, 10, xmin=0, zmin=0, xmax=10, zmax=5)
  ```


> **Why no `cone`/`torus` on Workplane?** Workplane does not provide `cone` or `torus` helpers; use the low-level `cq.Solid.makeCone` / `cq.Solid.makeTorus` below. ([CadQuery][2])

---

## Low-level primitive constructors (on `cq.Solid`)

> These return `cq.Solid`. You can fuse/cut with Workplane results using `combine` modes or add to a Workplane stack with `.add(...)`.

* `cq.Solid.makeBox(length, width, height, pnt=(0,0,0), dir=(0,0,1)) -> Solid`
* `cq.Solid.makeCylinder(radius, height, pnt=(0,0,0), dir=(0,0,1), angleDegrees=360) -> Solid`
* `cq.Solid.makeSphere(radius, pnt=(0,0,0), dir=(0,0,1), angleDegrees1=0, angleDegrees2=90, angleDegrees3=360) -> Solid`
* `cq.Solid.makeCone(radius1, radius2, height, pnt=(0,0,0), dir=(0,0,1), angleDegrees=360) -> Solid`
* `cq.Solid.makeTorus(radius1, radius2, pnt=(0,0,0), dir=(0,0,1), angleDegrees1=0, angleDegrees2=360) -> Solid`
* `cq.Solid.makeWedge(dx, dy, dz, xmin, zmin, xmax, zmax, pnt=(0,0,0), dir=(0,0,1)) -> Solid`

**Examples**:

```python
# Cone (low-level) placed at origin
cone = cq.Solid.makeCone(12, 2, 30)

# Torus (low-level) then add to Workplane and combine with a box
torus = cq.Solid.makeTorus(20, 5)
result = (cq.Workplane("XY").box(60, 40, 10)
          .add(torus))  # add torus to stack; default combine=fuse occurs on later ops
```


---

## Low-level 2D wire constructors (optional but allowed)

* `cq.Wire.makeCircle(radius, center=(0,0,0), normal=(0,0,1)) -> Wire`
* `cq.Wire.makeEllipse(x_radius, y_radius, center, normal, xDir, angle1=360, angle2=360, rotation_angle=0.0, closed=True) -> Wire`
* `cq.Wire.makePolygon(points, forConstruction=False, close=False) -> Wire`
  **Usage**: You can `.add(...)` a `Wire` to a Workplane, then `extrude`.

---

## Combine behavior and context solid

* Many Workplane creators accept `combine` = **True** (fuse to context), **"cut"/"s"** (subtract), **"a"** (additive), or **False** (keep separate). CadQuery tracks a **context solid** automatically once you first create a solid. ([CadQuery][2])

---

## “Square” and “Ball” mapping

* **Square** → `rect(xLen, yLen)` with `xLen == yLen`.
* **Ball** → `sphere(radius)`.
* **Cube** → `box(l, l, l)`.
* **Disc/Cylinder** → `cylinder(height, radius)`.
  (Use exactly these APIs; don’t invent `square()` or `ball()`.) ([CadQuery][1])

---

## Output contract

* The very last statement must set:

  ```python
  result = <the final cq.Workplane or cq.Solid or cq.Compound>
  ```
* No printing, no viewer calls are required (e.g., avoid `show_object` unless explicitly asked).

cq.Assembly(obj=None, loc=None, name=None, color=None, metadata=None)

Usage: create a color-aware container for parts/subassemblies.
Description: Children added to an assembly can carry their own color, or inherit the parent assembly’s color if not explicitly set. Use .add(...) to attach parts with color. 
CadQuery

Returns: cq.Assembly (chainable).

.add(obj, name=None, loc=None, color=None, metadata=None) (on Assembly)

Usage: attach a part or subassembly to the assembly; set persistent color with color=cq.Color(r, g, b, a=1.0).
Description: The color specified here is exported with the assembly (STEP/glTF). If color is omitted, the child inherits the parent assembly’s color. 
CadQuery

Returns: cq.Assembly (chainable).

cq.Color(r, g, b, a=1.0)

Usage: define a color using float channels in the range [0–1].
Description: This guide allows RGBA only to avoid name-list mismatches. Although CadQuery also supports certain named colors from a fixed list, names can fail if not on that list—so do not use cq.Color("name") here. 
CadQuery

Returns: cq.Color.

Assembly.export(path, exportType=None, mode="default", **kwargs)

Usage: write a colored assembly to disk.
Description:

STEP: mode="default" preserves per-part colors; mode="fused" attempts to fuse into one solid while preserving names and colors (may change faces; can be slower).

glTF: assembly-only; choose .gltf (text) or .glb (binary) by the file extension.
Examples on the official docs demonstrate color-preserving exports. 
Returns: Writes the file (no modeling object is returned).

Examples

Example 1 — Per-part colors that survive STEP & glTF

import cadquery as cq

# Parts
body = cq.Workplane("XY").box(30, 20, 10)
pin  = cq.Workplane("XY").cylinder(20, 4)

# Assembly with explicit per-part colors (RGBA in [0–1])
assy = (cq.Assembly(name="colored_demo")
        .add(body, name="body", color=cq.Color(0.10, 0.70, 0.20, 1.0))  # greenish
        .add(pin,  name="pin",  color=cq.Color(0.20, 0.40, 0.80, 0.6))) # semi-transparent

# Exports (colors preserved)
assy.export("colored.step")   # STEP
assy.export("colored.gltf")   # glTF (assembly-only)
result = assy


(Assembly exports preserve colors; glTF is assembly-only.) 

Example 2 — Parent color inheritance + child override (fused STEP)

import cadquery as cq

plate = cq.Workplane("XY").box(40, 30, 4)
boss  = cq.Workplane("XY").cylinder(10, 5)

# Parent sets default color; 'plate' inherits, 'boss' overrides
assy = (cq.Assembly(name="inherited_colors", color=cq.Color(0.75, 0.75, 0.75, 1.0))
        .add(plate, name="plate")  # inherits light gray
        .add(boss,  name="boss", color=cq.Color(1.0, 0.0, 0.0, 1.0)))  # red

# Export as a single fused solid while keeping names/colors
assy.export("inherited_fused.step", "STEP", mode="fused")
result = assy


(mode="fused" aims to produce one solid while retaining names/colors, with caveats noted in the docs.)

## Example script (mixing primitives with sketch features, all allowed)

```python
import cadquery as cq

# Base: box + cylinder boss created from sketch
base = (cq.Workplane("XY")
        .box(60, 40, 8)                         # primitive
        .faces(">Z").workplane()
        .circle(8).extrude(12))                 # sketch -> feature

# Add a low-level torus on top
torus = cq.Solid.makeTorus(14, 3)
result = base.add(torus)
```
Important: Stick to the above APIs and structure when writing the code. Do not use functions or methods outside this list. This will minimize errors and hallucinations and produce valid CadQuery code.
 
Common Error to avoid:
1. exclude function does not have "center" argument, do not use that.
2. Workplane.center only take two arguments Workplane.center(x, y), not three
3. moveTo(x, y) only take two arguments, not three
4. Do not use cq.Color("name") in this guide; stick to cq.Color(r, g, b, a). The named-color option exists but depends on a fixed list in the docs.



[1] [3] CadQuery Class Summary — CadQuery Documentation
https://cadquery.readthedocs.io/en/latest/classreference.html
[2] [4] [5] [6] [7] [8] [9] [10] CadQuery Class Summary — CadQuery Documentation
https://cadquerytest.readthedocs.io/en/readthedocs/classreference.html
[11] [12] [13] [14] [15] [16] [17] [18] [19] [20] [21] [22] [23] [24] [25] [26] [27] [28] [29] [32] [33] [34] [35] [36] [37] [38] [39] [40] [43] [44] [45] [46] CadQuery Class Summary — CadQuery Documentation
https://pythonhosted.org/cadquery/classreference.html?highlight=selector
[30] [31] [41] [42] cadquery.cq — CadQuery Documentation
https://pythonhosted.org/cadquery/_modules/cadquery/cq.html
