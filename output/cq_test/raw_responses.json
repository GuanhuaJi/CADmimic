[
  "```python\nimport cadquery as cq\n\n# --- Parameters\n# Metal Arm\narm_length = 300\narm_width = 20\narm_thickness = 1.5\nhead_length = 70\nhead_width = 28\n\n# Wood Grip\nwood_length = 120\nwood_width = 18\nwood_thickness = 10\n\n# Hinge/Pin\nhinge_hole_radius = 3.0\npin_radius = 2.9\npin_height = arm_thickness * 2 + 2\n\n# Ring\nring_outer_radius = 15\nring_inner_radius = 12\nring_thickness = 2\n\n# Assembly\nopen_angle = 20.0\n\n# --- Part Creation\n\n# Create a single metal arm, with the hinge point at (0,0)\n# The arm extends in the +X direction\nhead_start_x = arm_length - head_length\n\n# Base profile of the arm\narm_profile = (\n    cq.Workplane(\"XY\")\n    .moveTo(0, -arm_width / 2)\n    .lineTo(head_start_x, -arm_width / 2)\n    .lineTo(arm_length, -head_width / 2)\n    .lineTo(arm_length, head_width / 2)\n    .lineTo(head_start_x, arm_width / 2)\n    .lineTo(0, arm_width / 2)\n    .close()\n)\nmetal_arm = arm_profile.extrude(arm_thickness)\n\n# Add hinge hole at the origin\nmetal_arm = metal_arm.workplane().moveTo(0, 0).circle(hinge_hole_radius).cutThruAll()\n\n# Create the scalloped edge on the head by cutting circles\nscallop_radius = 7\nscallop_positions = [arm_length - 55, arm_length - 30, arm_length - 5]\nfor x_pos in scallop_positions:\n    metal_arm = metal_arm.moveTo(x_pos, head_width / 2).circle(scallop_radius).cutThruAll()\n    metal_arm = metal_arm.moveTo(x_pos, -head_width / 2).circle(scallop_radius).cutThruAll()\n\n# Create the wooden grip\nwood_grip = (\n    cq.Workplane(\"XY\")\n    .box(wood_length, wood_width, wood_thickness)\n)\n\n# Create the hinge pin\npin = cq.Workplane(\"XY\").cylinder(pin_height, pin_radius)\n\n# Create the locking ring\nring = (\n    cq.Workplane(\"XY\")\n    .circle(ring_outer_radius)\n    .circle(ring_inner_radius)\n    .extrude(ring_thickness)\n)\n\n# --- Assembly\nresult = cq.Assembly()\n\n# Define colors\nsilver_color = cq.Color(0.75, 0.75, 0.75)\nwood_color = cq.Color(0.6, 0.4, 0.2)\n\n# Common Z offsets\nz_offset_arm = arm_thickness / 2\nz_offset_wood = z_offset_arm + arm_thickness / 2 + wood_thickness / 2\nwood_x_pos = 70 # Position grip along the handle\n\n# Create and position the right-side arm and grip\nangle_r = open_angle / 2\nmetal_arm_r = metal_arm.translate((0, 0, z_offset_arm)).rotate((0, 0, 0), (0, 0, 1), angle_r)\nwood_grip_r = wood_grip.translate((wood_x_pos, 0, z_offset_wood)).rotate((0, 0, 0), (0, 0, 1), angle_r)\n\n# Create and position the left-side arm and grip\nangle_l = -open_angle / 2\nmetal_arm_l = metal_arm.translate((0, 0, -z_offset_arm)).rotate((0, 0, 0), (0, 0, 1), angle_l)\nwood_grip_l = wood_grip.translate((wood_x_pos, 0, -z_offset_wood)).rotate((0, 0, 0), (0, 0, 1), angle_l)\n\n# Position the ring\nring_translated = ring.translate((15, 0, 0))\n\n# Add parts to the assembly\nresult.add(metal_arm_r, name=\"metal_arm_right\", color=silver_color)\nresult.add(wood_grip_r, name=\"wood_grip_right\", color=wood_color)\nresult.add(metal_arm_l, name=\"metal_arm_left\", color=silver_color)\nresult.add(wood_grip_l, name=\"wood_grip_left\", color=wood_color)\nresult.add(pin, name=\"pin\", color=silver_color)\nresult.add(ring_translated, name=\"ring\", color=silver_color)\n```",
  "```python\nimport cadquery as cq\n\n# A CAD model of a pair of kitchen tongs, based on the provided video.\n# The model simplifies some complex features like the scalloped ends and the\n# exact locking mechanism, but captures the overall form and construction.\n\n# --- Parameters ---\n# Metal arm dimensions\nfinal_arm_length = 260.0\npivot_offset_from_end = 20.0\narm_width = 20.0\nhead_width = 28.0\nhead_length = 40.0\narm_thickness = 2.0\npivot_hole_radius = 4.0\n\n# Define key x-coordinates for the arm profile\nx_pivot = 0.0\nx_back = -pivot_offset_from_end\nx_front = x_pivot + final_arm_length\nx_head_start = x_front - head_length\n\n# Wood handle dimensions\nwood_length = 110.0\nwood_width = 15.0\nwood_height = 8.0\nwood_offset_from_pivot = 25.0\n\n# Assembly parameters\nopen_angle = 10.0\n\n# --- 1. Define Parts ---\n\n# Metal Arm\n# The profile is created as a closed polyline.\narm_contour = [\n    (x_back, -arm_width / 2),\n    (x_pivot, -arm_width / 2),\n    (x_head_start, -arm_width / 2),\n    (x_front, -head_width / 2),\n    (x_front, head_width / 2),\n    (x_head_start, arm_width / 2),\n    (x_pivot, arm_width / 2),\n    (x_back, arm_width / 2),\n]\n\n# Create the solid arm and cut the pivot hole.\nmetal_arm_solid = cq.Workplane(\"XY\").polyline(arm_contour).close().extrude(arm_thickness)\nmetal_arm = (\n    metal_arm_solid.faces(\">Z\")\n    .workplane()\n    .moveTo(x_pivot, 0)\n    .circle(pivot_hole_radius)\n    .extrude(-arm_thickness, combine=\"cut\")\n)\n\n# Wooden Handle\nwood_handle = cq.Workplane(\"XY\").box(wood_length, wood_width, wood_height, centered=True)\n\n# Pivot Pin\npin_height = arm_thickness * 2 + 1.0  # Height to connect two arms with a small gap\npivot_pin = cq.Workplane(\"XY\").cylinder(\n    pin_height, pivot_hole_radius, centered=True\n)\n\n# End cap and Pull Ring (simplified locking mechanism)\nend_cap = cq.Workplane(\"YZ\").box(10, arm_width, 15, centered=True)\npull_ring = cq.Solid.makeTorus(14, 3, dir=(1, 0, 0))\n\n# --- 2. Define Colors and Sub-Assemblies ---\n\nmetal_color = cq.Color(0.78, 0.78, 0.82)  # Stainless steel grey\nwood_color = cq.Color(0.80, 0.65, 0.45)   # Light wood/bamboo color\n\n# Create a sub-assembly for a single arm (metal + wood)\n# Top arm\ntop_arm_assy = cq.Assembly()\ntop_arm_assy.add(metal_arm, name=\"metal_part\", color=metal_color)\nwood_pos_top = cq.Vector(\n    x_pivot + wood_offset_from_pivot + wood_length / 2,\n    0,\n    arm_thickness / 2 + wood_height / 2,\n)\ntop_arm_assy.add(\n    wood_handle, name=\"wood_part\", color=wood_color, loc=cq.Location(wood_pos_top)\n)\n\n# Bottom arm\nbottom_arm_assy = cq.Assembly()\nbottom_arm_assy.add(metal_arm, name=\"metal_part\", color=metal_color)\nwood_pos_bottom = cq.Vector(\n    x_pivot + wood_offset_from_pivot + wood_length / 2,\n    0,\n    -(arm_thickness / 2 + wood_height / 2),\n)\nbottom_arm_assy.add(\n    wood_handle, name=\"wood_part\", color=wood_color, loc=cq.Location(wood_pos_bottom)\n)\n\n\n# --- 3. Create the Final Assembly ---\n\nresult = cq.Assembly(name=\"kitchen_tongs\")\n\n# Add the two arm assemblies, rotated around the pivot point (origin)\nresult.add(\n    top_arm_assy,\n    name=\"top_arm\",\n    loc=cq.Location(cq.Vector(0, 0, arm_thickness / 2), cq.Vector(0, 0, 1), open_angle),\n)\nresult.add(\n    bottom_arm_assy,\n    name=\"bottom_arm\",\n    loc=cq.Location(cq.Vector(0, 0, -arm_thickness / 2), cq.Vector(0, 0, 1), -open_angle),\n)\n\n# Add the pivot pin at the origin\nresult.add(pivot_pin, name=\"pivot_pin\", color=metal_color)\n\n# Add the end cap and pull ring\nresult.add(end_cap, name=\"end_cap\", color=metal_color, loc=cq.Location(cq.Vector(x_back - 5, 0, 0)))\nresult.add(pull_ring, name=\"pull_ring\", color=metal_color, loc=cq.Location(cq.Vector(x_back - 15, 0, 0)))\n```",
  "```python\nimport cadquery as cq\n\n# Parameters for the tongs\narm_thickness = 1.5\nhandle_width = 20.0\nhead_width = 35.0\ntotal_length = 270.0\nhandle_length = 100.0\npivot_hole_dia = 5.0\npivot_from_end = 25.0\nring_hole_dia = 5.0\n\nwood_length = 80.0\nwood_width = 18.0\nwood_thickness = 6.0\n\npivot_pin_height = 4.0\nopen_angle = 15.0\n\n# --- Define Parts ---\n\n# 1. Metal Arm\n# Define the profile with the pivot point at the origin (0,0)\np0 = (-pivot_from_end, -handle_width / 2.0)\np1 = (handle_length - pivot_from_end, -handle_width / 2.0)\np2 = (total_length - pivot_from_end - 30, -head_width / 2.0)\np3 = (total_length - pivot_from_end - 15, -(head_width / 2.0 - 5))\np4 = (total_length - pivot_from_end, -head_width / 2.0)\np5 = (total_length - pivot_from_end, head_width / 2.0)\np6 = (total_length - pivot_from_end - 15, (head_width / 2.0 - 5))\np7 = (total_length - pivot_from_end - 30, head_width / 2.0)\np8 = (handle_length - pivot_from_end, handle_width / 2.0)\np9 = (-pivot_from_end, handle_width / 2.0)\n\n# Create the arm solid by extruding the profile\narm_profile = cq.Workplane(\"XY\").polyline([p0, p1, p2, p3, p4, p5, p6, p7, p8, p9]).close()\narm_metal = arm_profile.extrude(arm_thickness)\n\n# Add pivot and ring holes\narm_metal = (\n    arm_metal.faces(\">Z\").workplane()\n    .moveTo(0, 0).circle(pivot_hole_dia / 2.0)  # Pivot hole at origin\n    .moveTo(-pivot_from_end + 10, 0).circle(ring_hole_dia / 2.0) # Ring hole\n    .extrude(-arm_thickness, combine=\"cut\")\n)\n\n# 2. Wood Grip\nwood_grip = cq.Workplane(\"XY\").box(wood_length, wood_width, wood_thickness)\n\n# 3. Pivot Pin\npivot_pin = cq.Workplane(\"XY\").cylinder(height=pivot_pin_height, radius=pivot_hole_dia / 2.0, centered=True)\n\n# 4. Locking Ring\nlocking_ring = cq.Solid.makeTorus(12, 1.5) # (major_radius, minor_radius)\n\n# --- Create Assemblies ---\n\n# Colors\nmetal_color = cq.Color(0.75, 0.75, 0.79)\nwood_color = cq.Color(0.87, 0.72, 0.53)\n\n# Create a reusable arm sub-assembly (metal part + wood grip)\narm_assy = cq.Assembly(name=\"arm\")\narm_assy.add(arm_metal, name=\"metal\", color=metal_color)\n\n# Position the wood grip on the metal arm\nwood_center_x = (handle_length / 2.0) - pivot_from_end\nwood_center_z = arm_thickness + (wood_thickness / 2.0)\nwood_loc = cq.Location(cq.Vector(wood_center_x, 0, wood_center_z))\narm_assy.add(wood_grip, name=\"wood\", color=wood_color, loc=wood_loc)\n\n# Create the final tongs assembly\ntongs_assy = cq.Assembly(name=\"tongs\")\n\n# Add the first arm (bottom arm), moved down\nloc_arm1 = cq.Location(cq.Vector(0, 0, -pivot_pin_height / 2.0))\ntongs_assy.add(arm_assy, name=\"arm1\", loc=loc_arm1)\n\n# Add the second arm (top arm), flipped, moved up, and rotated open\nloc_flip = cq.Location(cq.Vector(0,0,0), cq.Vector(1,0,0), 180) # Flip upside down\nloc_move = cq.Location(cq.Vector(0,0, pivot_pin_height / 2.0)) # Move up\nloc_open = cq.Location(cq.Vector(0,0,0), cq.Vector(0,0,1), open_angle) # Rotate open\nloc_arm2 = loc_open * loc_move * loc_flip\ntongs_assy.add(arm_assy, name=\"arm2\", loc=loc_arm2)\n\n# Add the pivot pin at the center\ntongs_assy.add(pivot_pin, name=\"pivot\", color=metal_color)\n\n# Add the locking ring, rotated and positioned at the handle end\nring_pos_x = -pivot_from_end + 10\nring_loc = cq.Location(cq.Vector(ring_pos_x, 0, 0), cq.Vector(0, 1, 0), 90)\ntongs_assy.add(locking_ring, name=\"ring\", color=metal_color, loc=ring_loc)\n\nresult = tongs_assy\n```",
  "I have generated the CADQuery code to model the kitchen tongs shown in the video. However, the execution environment lacks the necessary `cadquery` library to run the code and produce the 3D model.\n\nBelow is the code I created. It is designed to generate a 3D model of the tongs with the following features:\n\n*   **Overall Structure**: The model consists of two separate arms joined by a hinge pin, representing a pair of tongs in the closed position.\n*   **Arms**: Each arm is modeled as a long, flat metal piece that flares out at the tip to form the jaw, similar to the shape in the video.\n*   **Handles**: Rectangular wooden handles are attached to the outer side of each metal arm.\n*   **Hinge and Ring**: A cylindrical pin connects the two arms at the pivot point. A circular ring, for hanging or locking, is located at the very end of the tongs.\n*   **Appearance**: The model is assembled with colors to differentiate the silver metallic parts from the brown wooden handles.\n\nDue to the limitations of the available CAD APIs, certain details like the scalloped edges of the jaws and the slight curve of the arms have been simplified.\n\n### Generated CADQuery Code\n\n```python\nimport cadquery as cq\n\n# --- Parameters ---\n# Metal Arms\nlength_total = 300\nlength_handle_part = 240\nwidth_handle = 18\nwidth_jaw_tip = 30\nthickness_metal = 2\n\n# Hinge/Hole\nhole_dist_from_end = 20\nhole_radius = 4\n\n# Wooden Handles\nhandle_length = 130\nhandle_width = 18 \nhandle_thickness = 8\nhandle_offset_from_end = 40\n\n# Hanger Ring\nring_major_radius = 14\nring_minor_radius = 2.5\nring_offset_from_end = -10\n\n# Assembly Colors\nsilver_color = cq.Color(0.75, 0.75, 0.75)\nwood_color = cq.Color(0.6, 0.4, 0.2)\n\n\n# --- Define the shared 2D profile for the metal arms ---\nmetal_profile = (\n    cq.Workplane(\"XY\")\n    .polyline([\n        (0, -width_handle/2),\n        (length_handle_part, -width_handle/2),\n        (length_total, -width_jaw_tip/2),\n        (length_total, width_jaw_tip/2),\n        (length_handle_part, width_handle/2),\n        (0, width_handle/2),\n    ])\n    .close()\n)\n\n# --- Part 1: Bottom Arm ---\n# Extrude metal part downwards\narm1_metal = metal_profile.extrude(-thickness_metal)\n# Drill the hinge hole\narm1_metal = (\n    arm1_metal.faces(\"<Z\") # Face on the z=0 plane\n    .workplane()\n    .moveTo(hole_dist_from_end, 0)\n    .circle(hole_radius)\n    .extrude(thickness_metal, combine=\"cut\")\n)\n# Create the wooden handle, positioned below the metal arm\nhandle1 = (\n    cq.Workplane(\"XY\", origin=(handle_offset_from_end + handle_length / 2, 0, -thickness_metal - handle_thickness / 2))\n    .box(handle_length, handle_width, handle_thickness)\n)\n\n# --- Part 2: Top Arm ---\n# Extrude metal part upwards\narm2_metal = metal_profile.extrude(thickness_metal)\n# Drill the hinge hole\narm2_metal = (\n    arm2_metal.faces(\"<Z\") # Face on the z=0 plane\n    .workplane()\n    .moveTo(hole_dist_from_end, 0)\n    .circle(hole_radius)\n    .extrude(-thickness_metal, combine=\"cut\")\n)\n\n# Create the wooden handle, positioned above the metal arm\nhandle2 = (\n    cq.Workplane(\"XY\", origin=(handle_offset_from_end + handle_length / 2, 0, thickness_metal + handle_thickness / 2))\n    .box(handle_length, handle_width, handle_thickness)\n)\n\n# --- Part 3: Hinge Pin ---\n# Create a cylinder for the hinge pin\n# It spans from -thickness_metal to +thickness_metal\npin = (\n    cq.Workplane(\"XZ\", origin=(hole_dist_from_end, 0, 0))\n    .cylinder(2 * thickness_metal, hole_radius)\n)\n\n# --- Part 4: Hanger Ring ---\n# Create a torus for the hanger/lock ring\nring = cq.Solid.makeTorus(ring_major_radius, ring_minor_radius, pnt=(ring_offset_from_end, 0, 0), dir=(1, 0, 0))\n\n\n# --- Final Assembly ---\n# Create an assembly and add all the parts with their respective colors\ntongs_assembly = (\n    cq.Assembly(name=\"tongs\")\n    .add(arm1_metal, name=\"bottom_arm_metal\", color=silver_color)\n    .add(handle1, name=\"bottom_arm_handle\", color=wood_color)\n    .add(arm2_metal, name=\"top_arm_metal\", color=silver_color)\n    .add(handle2, name=\"top_arm_handle\", color=wood_color)\n    .add(pin, name=\"hinge_pin\", color=silver_color)\n    .add(ring, name=\"hanger_ring\", color=silver_color)\n)\n\nresult = tongs_assembly\n```",
  "```python\nimport cadquery as cq\n\n# --- Parameters ---\n# Dimensions for various parts of the tongs, derived from visual inspection.\narm_length = 250\narm_width = 20\narm_thickness = 4\n\nhead_length = 40\nhead_max_width = 30\n\nwood_length = 100\nwood_width = 22\nwood_thickness = 8\n\npivot_pin_pos_x = 15\npivot_pin_radius = 3\npivot_pin_length = 30\n\nring_pos_x = 0\nring_major_radius = 15\nring_minor_radius = 4\n\n# --- Define Parts ---\n\n# 1. Metal Arm\n# The main bar of the arm is a long, flat box.\nmain_bar = cq.Workplane(\"XY\").box(\n    arm_length, arm_width, arm_thickness, centered=(False, True, True)\n)\n# The head of the tongs is a flared shape for gripping.\nhead = (\n    cq.Workplane(\"XY\")\n    .moveTo(arm_length, 0)\n    .polyline([\n        (0, -arm_width / 2),\n        (head_length, -head_max_width / 2),\n        (head_length, head_max_width / 2),\n        (0, arm_width / 2),\n    ])\n    .close()\n    .extrude(arm_thickness, centered=True)\n)\n# The bar and head are combined into a single solid part.\nmetal_arm_solid = main_bar.union(head)\n\n# A cylindrical hole is cut for the pivot pin.\nhole_cutter = cq.Workplane(\"XZ\").cylinder(pivot_pin_length, pivot_pin_radius)\nmetal_arm_part = metal_arm_solid.cut(hole_cutter.translate((pivot_pin_pos_x, 0, 0)))\n\n# 2. Wood Handle\n# The wooden handle is a simple box.\nwood_handle_part = cq.Workplane(\"XY\").box(wood_length, wood_width, wood_thickness)\n\n# 3. Pivot Pin\n# The pin is a cylinder that will join the two arms.\npivot_pin_part = cq.Workplane(\"XZ\").cylinder(pivot_pin_length, pivot_pin_radius)\n\n# 4. Locking Ring\n# The ring at the back is modeled as a torus.\nring_solid = cq.Solid.makeTorus(ring_major_radius, ring_minor_radius)\nlocking_ring_part = (\n    cq.Workplane(\"XY\")\n    .add(ring_solid)\n    .rotate((0, 0, 0), (0, 1, 0), 90)\n)\n\n# --- Assembly ---\n# The final object is an assembly of all the individual parts.\ntongs_assembly = cq.Assembly()\n\n# Define colors for the different materials.\nsteel_color = cq.Color(0.75, 0.75, 0.78)\nwood_color = cq.Color(0.65, 0.50, 0.40)\n\n# Create a reusable sub-assembly for a single arm (metal + wood).\narm = cq.Assembly()\narm.add(metal_arm_part, name=\"metal_arm\", color=steel_color)\n# Position the wood handle on top of the metal part.\nwood_location = cq.Location(\n    cq.Vector(arm_length / 3, 0, (arm_thickness / 2) + (wood_thickness / 2))\n)\narm.add(wood_handle_part, name=\"wood_handle\", loc=wood_location, color=wood_color)\n\n# Add two arm sub-assemblies to the main assembly, rotated to form a 'V' shape.\nopen_angle = 12\ntongs_assembly.add(\n    arm, name=\"top_arm\", loc=cq.Location(cq.Vector(0, 0, 0), cq.Vector(0, 1, 0), open_angle)\n)\ntongs_assembly.add(\n    arm,\n    name=\"bottom_arm\",\n    loc=cq.Location(cq.Vector(0, 0, 0), cq.Vector(0, 1, 0), -open_angle),\n)\n\n# Add the pivot pin at the correct location to join the arms.\npin_location = cq.Location(cq.Vector(pivot_pin_pos_x, 0, 0))\ntongs_assembly.add(\n    pivot_pin_part, name=\"pivot_pin\", loc=pin_location, color=steel_color\n)\n\n# Add the locking ring at the end of the tongs.\nring_location = cq.Location(cq.Vector(ring_pos_x, 0, 0))\ntongs_assembly.add(\n    locking_ring_part, name=\"locking_ring\", loc=ring_location, color=steel_color\n)\n\n# The final assembled object.\nresult = tongs_assembly\n```"
]